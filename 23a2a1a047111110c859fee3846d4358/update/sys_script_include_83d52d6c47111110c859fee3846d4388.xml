<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_807586_sam_scrip.SAMPContentFileManagerUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SAMPContentFileManagerUtil</name>
        <script><![CDATA[var SAMPContentFileManagerUtil = Class.create();
SAMPContentFileManagerUtil.prototype = {

	MANAGE_SW_LIBRARY_TABLE: 'samp_manage_software_library',
	SYS_ATTACHMENT_TABLE: 'sys_attachment',
	CONTENT_MANAGER_SCHEDULED_JOB: '3bffb1d70b40130083d305c137673a6a',
	ATTACHMENT_TYPE: ['application/zip', 'application/x-zip-compressed'],
	STATUS_IN_PROGRESS: 'in_progress',
	CONTENT_UPDATE_JOB: '26f6310bdb8773004fbf75868c961988',
	CONTENT_TABLES_TO_EXPORT: [
		'cmdb_sam_sw_discovery_model',
		'samp_processor_definition',
		'cmdb_sam_sw_install',
		'samp_custom_sw_product_definition',
		'sam_sw_product_lifecycle',
		'cmdb_unidentified_file_set',
		'sam_spend_transaction',
		'samp_sw_unrecognized_subscription_identifier',
	],

	initialize: function() {
	},

	_isJobActive: function(grCur) {
		var grActive = new GlideRecord(grCur.getTableName());
		grActive.addQuery('status', this.STATUS_IN_PROGRESS);
		grActive.query();

		if (grActive.next()) {
			var message;

			if (grActive.getValue('content_type') === 'import') {
				message = gs.getMessage('Import is in progress. Please run export after import is complete');
			} else {
				message = gs.getMessage('Export is in progress. Please run import after export is complete');
			}

			gs.addErrorMessage(message);
			return true;
		}
		return false;
	},

	_updateStatus: function (grCur, status) {
		grCur.setValue('status', status);
		grCur.update();
	},

	_deleteAttachments: function(grCur) {
		var glideSysAttach = new GlideSysAttachment();
		glideSysAttach.deleteAll(grCur);
	},

	_triggerScheduledJob: function() {
		var jobGr = new GlideRecord('sysauto_script');
		jobGr.addQuery('sys_id', this.CONTENT_MANAGER_SCHEDULED_JOB);
		jobGr.addActiveQuery();
		jobGr.query();
		if (jobGr.next()) { SncTriggerSynchronizer.executeNow(jobGr); }
	},

	_verifyImportAttachment: function(grCur) {
		var grAttach = new GlideRecord(this.SYS_ATTACHMENT_TABLE);
		grAttach.addQuery('table_name', grCur.getTableName());
		grAttach.addQuery('table_sys_id', grCur.getUniqueValue());
		grAttach.query();

		if (grAttach.getRowCount() > 1) {
			gs.addErrorMessage(gs.getMessage('Multiple file content import is not supported currently. Please remove invalid files before running import.'));
		} else if (grAttach.next()) {
			if (this.ATTACHMENT_TYPE.indexOf(grAttach.getValue('content_type')) > -1) {
				return true;
			}

			gs.addErrorMessage(gs.getMessage('Please attach a valid content file.'));
		} else {
			gs.addErrorMessage(gs.getMessage('Please attach a file before running import.'));
		}

		return false;
	},

	invokeContentManagerAPI: function() {
		var grType = new GlideRecord(this.MANAGE_SW_LIBRARY_TABLE);
		grType.addQuery('status', this.STATUS_IN_PROGRESS);
		grType.query();

		if (grType.next()) {
			var contentType = grType.getValue('content_type');
			var contentManager = new SNC.SAMOnPremContentManager();
			try {
				if (contentType === 'import') {
					contentManager.process(this.MANAGE_SW_LIBRARY_TABLE, grType.getUniqueValue(), null, null);
					this._deleteAttachments(grType);
					// For new records, copy values from staged to actual columns
					this.setDefaultValues();
					this._updateStatus(grType, 'successfully_imported');
					/*
					1. XML import computes WHO columns for new records if unspecified in XML
					2. WHO columns are not part of exported content XML.
						Hence they are not automatically refreshed for existing records
					3. Weekly content update job processes records that are updated after it's last run date.
					In this case, it won't pick up updated records as sys_updated_on is not modified
					4. Hence clearing off last run date to enable processing of all content records
					5. As on-prem customers do not get data on a weekly basis, this would not
						cause huge performance overhead
					*/
					this.updateLastRunDate();
					// Trigger content update job
					this.triggerContentUpdateJob();
				} else {
					contentManager.process(this.MANAGE_SW_LIBRARY_TABLE, grType.getUniqueValue(),
						this.CONTENT_TABLES_TO_EXPORT.join(), 'SAM_Normalization_Content');
					this._updateStatus(grType, 'ready_for_download');
				}
			} catch (err) {
				// cannot gs.addErrorMessage because this function is invoked by a job, so log it
				gs.logError(err, this.type);
				this._updateStatus(grType, 'failed');
			}
		}
	},

	contentImport: function(grCur) {
		// Run import only if valid attachment exists and if job is not active
		if (this._verifyImportAttachment(grCur) && !this._isJobActive(grCur)) {
			this._updateStatus(grCur, this.STATUS_IN_PROGRESS);
			this._triggerScheduledJob();
		}
	},

	contentExport: function(grCur) {
		// Verify if there are any records to export
		var grStaging = new GlideRecord('cds_client_staging');
		grStaging.query();

		if (grStaging.getRowCount() === 0) {
			gs.addErrorMessage(gs.getMessage('No data available to Export. Please contact support.'));
		} else if (!this._isJobActive(grCur)) {
			// Run export only if job is not active
			this._updateStatus(grCur, this.STATUS_IN_PROGRESS);
			this._deleteAttachments(grCur);
			this._triggerScheduledJob();
		}
	},

	// Check if customer has opted-in any one of the Software Asset Management Content Services
	isCustomerOptIn: function() {
		var op = GlideRecord('samp_configuration');
		op.addQuery('value', 'true');
		op.query();
		if (op.next()) { return true; }
		return false;
	},

	setDefaultValues: function() {
		var gr;
		var props;
		var mandatoryColumns;
		var stageColumn;
		var tablesMap = global.SAMContentUpdateAPI.TABLES_MAP;
		for (var table in tablesMap) {
			props = tablesMap[table];
			mandatoryColumns = props.mandatoryColumns;
			gr = new GlideRecord(table);
			if (gr.isValid()) {
				for (var index in mandatoryColumns) {
					var mcolumn = mandatoryColumns[index];
					if (gr.isValidField(mcolumn)) {
						gr.addNullQuery(mcolumn);
					}
				}
				gr.query();
				while (gr.next()) {
					var mapping = props.mapping;
					for (var column in mapping) {
						stageColumn = mapping[column];
						if (gr.isValidField(column) && gr.isValidField(stageColumn)) {
							gr.setValue(column, gr.getValue(stageColumn));
						}
					}
					gr.setWorkflow(false);
					gr.update();
				}
			}
		}

		// Handle PPN license metric and license type defaulting
		var ppnHandler = new global.SamProductDefinitionUpdateHandler();
		gr = new GlideRecord('samp_sw_product_definition');
		gr.setWorkflow(false);
		gr.addNullQuery('license_metric');
		gr.addNullQuery('product_type');
		gr.query();
		while (gr.next()) {
			ppnHandler.licenseMetricChangeHandler(gr, true);
			ppnHandler.productTypeChangeHandler(gr, true);
		}

		// Handle IBM Product Catalog license metric defaulting
		if (GlidePluginManager.isActive('sn_samp_ibm_lic')) {
			var prodCatalogHandler = new sn_samp_ibm_lic.IBMProductCatalogUpdateHandler();
			gr = new GlideRecord(sn_samp_ibm_lic.IBMProductCatalogUpdateHandler.ENTITY_NAME);
			gr.setWorkflow(false);
			gr.addNullQuery('license_metric');
			gr.query();
			while (gr.next()) {
				prodCatalogHandler.licenseMetricChangeHandler(gr, true);
			}
		}

		// Handle product lifecycle
		gr = new GlideRecord(ReconciliationConstants.SOFTWARE_PRODUCT_LIFECYCLE_TABLE);
		gr.setWorkflow(false);
		gr.addNullQuery('publisher');
		gr.query();
		while (gr.next()) {
			gr.setValue('publisher', gr.norm_product.publisher.manufacturer);
			gr.update();
		}
	},

	triggerContentUpdateJob: function() {
		var job = new GlideQuery('sysauto_script')
			.where('sys_id', this.CONTENT_UPDATE_JOB)
			.limit(1)
			.toGlideRecord();
		job.query();
		if (job.next()) {
			SncTriggerSynchronizer.executeNow(job);
		}
	},

	updateLastRunDate: function() {
		// Glidequery is not setting value to blank
		// Hence using toGlideRecord
		var gr = new global.GlideQuery(global.SAMContentUpdateAPI.JOB_PARAMS.propertyTableName)
			.where('key', global.SAMContentUpdateAPI.JOB_PARAMS.keyLastRunDate)
			.toGlideRecord();
		gr.query();
		if (gr.next()) {
			gr.setValue('value', '');
			gr.update();
		}
	},

	type: 'SAMPContentFileManagerUtil',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-10 15:54:42</sys_created_on>
        <sys_id>83d52d6c47111110c859fee3846d4388</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SAMPContentFileManagerUtil</sys_name>
        <sys_package display_value="SAM Scripts" source="x_807586_sam_scrip">23a2a1a047111110c859fee3846d4358</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="SAM Scripts">23a2a1a047111110c859fee3846d4358</sys_scope>
        <sys_update_name>sys_script_include_83d52d6c47111110c859fee3846d4388</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-10 15:54:42</sys_updated_on>
    </sys_script_include>
</record_update>
