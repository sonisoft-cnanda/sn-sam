<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_807586_sam_scrip.SamCloudSoftwareModelTree</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SamCloudSoftwareModelTree</name>
        <script><![CDATA[var SamCloudSoftwareModelTree = Class.create();

var EQUAL = 0;
var SUBSET = 1;
var SUPERSET = 3;

SamCloudSoftwareModelTree.prototype = Object.extendsObject(global.SamSoftwareModelTree, {
	initialize: function(softwareModels, ignoreProperties) {
		this.ignoreProperties = ignoreProperties || [];
		global.SamSoftwareModelTree.prototype.initialize.call(this, softwareModels);
	},

	insertSoftwareModel: function(model) {
		var node = {
			model: model,
			children: [],
			duplicateModels: [],
		};
		var treeNodes = this.trees;
		var located;
		var duplicate = false;
		do {
			located = true;
			for (var j = treeNodes.length - 1; j >= 0; j--) {
				var relationship = SamCloudSoftwareModelTree.relationshipBetween(model,
					treeNodes[j].model, this.ignoreProperties);
				if (relationship === SUBSET) {
					treeNodes = treeNodes[j].children;
					located = false;
					break;
				}

				if (relationship === EQUAL) {
					treeNodes[j].duplicateModels.push(model.sysId);
					this.nodes[model.sysId] = treeNodes[j];
					duplicate = true;
					break;
				}

				if (relationship === SUPERSET) {
					node.children.push(treeNodes[j]);
					treeNodes.splice(j, 1);
				}
			}
		} while (!located);

		if (!duplicate) {
			treeNodes.push(node);
			this.nodes[model.sysId] = node;
		}
	},

	type: 'SamCloudSoftwareModelTree',
});

// check the relationship between two software models
SamCloudSoftwareModelTree.relationshipBetween = function(lhs, rhs, ignoreProperties) {
	var newLHS = {};
	var newRHS = {};

	for (var field in lhs) {
		if ((ignoreProperties || []).indexOf(field) !== -1) {
			continue;
		}
		newLHS[field] = lhs[field];
		newRHS[field] = rhs[field];
	}
	return global.SamSoftwareModelTree.relationshipBetween(newLHS, newRHS);
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-10 15:54:35</sys_created_on>
        <sys_id>25d5e96c47111110c859fee3846d4303</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SamCloudSoftwareModelTree</sys_name>
        <sys_package display_value="SAM Scripts" source="x_807586_sam_scrip">23a2a1a047111110c859fee3846d4358</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="SAM Scripts">23a2a1a047111110c859fee3846d4358</sys_scope>
        <sys_update_name>sys_script_include_25d5e96c47111110c859fee3846d4303</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-10 15:54:35</sys_updated_on>
    </sys_script_include>
</record_update>
