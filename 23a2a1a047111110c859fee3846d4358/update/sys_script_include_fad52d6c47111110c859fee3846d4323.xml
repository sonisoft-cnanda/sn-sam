<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_807586_sam_scrip.SampDemoData</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SampDemoData</name>
        <script><![CDATA[var SampDemoData = Class.create();
SampDemoData.prototype = {
	initialize: function() {
	},

	onload: function() {
		// Jakarta load usage demo data
		var grSingle = new GlideRecord('samp_sw_usage');
		grSingle.orderByDesc('year');
		grSingle.orderByDesc('month_used');
		grSingle.setLimit(1);
		grSingle.query();
		grSingle.next();

		var gdt = new GlideDateTime();
		var current_year = gdt.getYearLocalTime();
		var current_month = gdt.getMonthLocalTime();

		var monthDiff = ((current_year - parseInt(grSingle.getValue('year'), 10)) * 12) + (current_month - parseInt(grSingle.getValue('month_used'), 10)) - 1;

		var grUsage = new GlideRecord('samp_sw_usage');
		grSingle.orderByDesc('year');
		grSingle.orderByDesc('month_used');
		grUsage.query();

		while (grUsage.next()) {
			var newMonth = parseInt(grUsage.getValue('month_used'), 10) + monthDiff;
			if (newMonth > 12) {
				grUsage.year = parseInt(grUsage.getValue('year'), 10) + parseInt(newMonth / 12, 10);
				grUsage.month_used = parseInt(newMonth, 10) % 12;
			} else {
				grUsage.month_used = newMonth;
			}
			grUsage.setWorkflow(false);
			grUsage.update();
		}
		this.executeScheduledJob('SAM - Daily Job');

		this.createAssetReclamationRequests();
	},

	executeScheduledJob: function(jobName) {
		var rec = new GlideRecord('sysauto_pa');
		rec.get('name', jobName);
		gs.executeNow(rec);
	},

	createAssetReclamationRequests: function() {
		this.createARRForSelfServiceFlow();
		this.createARRForEmployeeSepFlow();
	},

	createARRForSelfServiceFlow: function() {
		var SELF_SERVICE_USER = '786705f0a9363010fa9b0ba07eb91bac';
		var SELF_SERVICE_USER_ASSETS = '13ac4138a9363010fa9b0ba07eb91b56';
		var reclaimDate = new GlideDateTime();
		reclaimDate.addDaysLocalTime(7);

		var grArr1 = new GlideRecord('asset_reclamation_request');
		grArr1.setValue('requested_by', 'user');
		grArr1.setValue('requested_for', SELF_SERVICE_USER);
		grArr1.setValue('assets', SELF_SERVICE_USER_ASSETS);
		grArr1.setValue('reclaim_date', reclaimDate.getDate());
		grArr1.insert();
	},

	createARRForEmployeeSepFlow: function() {
		var ES_USER = '2e4c0370a9b63010fa9b0ba07eb91b56';
		var ES_USER_ASSETS = 'e3ce03f0a9b63010fa9b0ba07eb91b3d,da705334a9b63010fa9b0ba07eb91b5b,a7f01b34a9b63010fa9b0ba07eb91b20';
		var reclaimDate = new GlideDateTime();
		reclaimDate.addDaysLocalTime(-2);

		var grArr2 = new GlideRecord('asset_reclamation_request');
		grArr2.setValue('requested_by', 'hr');
		grArr2.setValue('requested_for', ES_USER);
		grArr2.setValue('employee_separation', true);
		grArr2.setValue('assets', ES_USER_ASSETS);
		grArr2.setValue('reclaim_date', reclaimDate.getDate());
		grArr2.setValue('reclaim_method', '	drop_off');
		grArr2.insert();
	},

	type: 'SampDemoData',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-10 15:54:41</sys_created_on>
        <sys_id>fad52d6c47111110c859fee3846d4323</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SampDemoData</sys_name>
        <sys_package display_value="SAM Scripts" source="x_807586_sam_scrip">23a2a1a047111110c859fee3846d4358</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="SAM Scripts">23a2a1a047111110c859fee3846d4358</sys_scope>
        <sys_update_name>sys_script_include_fad52d6c47111110c859fee3846d4323</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-10 15:54:41</sys_updated_on>
    </sys_script_include>
</record_update>
